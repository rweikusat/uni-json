=head1 NAME

uni-json - A C JSON parser designed to be usable in any runtime environment

=head1 SYNOPSIS

    #include <uni_json_paser.h>

    extern unsigned uni_json_max_nesting;

    char *uni_json_ec_2_msg(unsigned ec);
    void *uni_json_parse(uint8_t *data, size_t len, struct uni_json_p_binding *binds,
                         void *err_p);

=head1 DESCRIPTION

Uni-json (for "universal") is a JSON parsing library written in C that's designed to be
independent of (and thus, usable in) any particular execution environment by delegating
the task of creating and manageing actual objects representing particular JSON constructs
to "someone else" via a set of callbacks (see L<uni-json-parser-bindings(3)> for details.

Further design goals are simplicity  and speed, in that order. The code should be easy
enough to understand that one can be reasonably confident that it actually works instead
of trying to shave off every couple of nanoseconds which could be saved somewhere. In
particular, this means it's a recursive-descent parser based on handling each individual
syntactic construct with a dedicated function and selecting the function to parse a
particular construct by doing a table-lookup of its first character..

=head2 Functions

=over

=item * C<void *uni_json_parse(uint8_t *data, size_t len, struct uni_json_p_binding *binds, void *err_p)>

Parse C<len> bytes of JSON text starting at C<data> using the parser bindings passed
via C<binds> for object creation and management. Returns a pointer to a data object
representing the JSON value found in the text or C<NULL> on error. For the latter case,
the C<on_error> handler passed via C<binds> will be invoked with an error code and the
position of the error in the input text. The C<err_p> argument is passed through to
error handling routine.

B<The text pointed to by C<data> is not expected to be a valid C string. Embedded null bytes
will be handled correctly, that is, flagged as JSON syntax errors.>

=item * C<char *uni_json_ec_2_msg(unsigned ec)>

Map the error code passeed as C<ec> to a standard (English) text message.

=back

=head2 Variables

=over

=item * C<extern unsigned uni_json_max_nesting>

Maximum depth the parser will descend to in nested structures before aborting
with an error. Defaults to B<0xffffffff>, ie, no effective limit. Can be set
to a smaller value to avoid DoS-attacks when dealing with data from
untrusted sources.

=back

=head2 Error Codes

=over

=item * C<UJ_E_INV>

A character which cannot start a token was
encountered when looking for a JSON value.

=item * C<UJ_E_NO_VAL>

No JSON value was found in a situation where one was expected. This can
either happen because the text passed to C<uni_json_parse> didn't contain
a JSON value at all (empty or only whitespace) or because text representing
an JSON array or object ended with a separator without a value behind it.

=item * C<UJ_E_INV_LIT>

An invalid literal string was encountered, ie one with was neither B<false> nor
B<null> nor B<true>.

=item * C<UJ_E_GARBAGE>

The JSON text passed to C<uni_json_parse> contained text beyond  a single JSON value
possibly surrounded by whitespace.

=item * C<UJ_E_EOS>

The parser hit the end of the input text before the JSON value
being parsed was complete (eg, an array not ending with B<]>).

=item * C<UJ_E_INV_IN>

An invalid character was encountered while parsing a JSON value, eg,
because of an object using B<,> instead of B<:> between a key and the associated
value.

=item * C<UJ_E_ADD>

A binding routine supposed to add data to a string or a value to
an array or a key-value-pair to an object returned an error
indicator.

=item * C<UJ_E_LEADZ>

The integral part of a number other than 0 started with a B<0> character.

=item * C<UJ_E_NO_DGS>

Some part of a number (integral, fractional or exponent) didn't
contain any digits.

=item * C<UJ_E_INV_CHAR>

A literal control character was found in a string.

=item * C<UJ_E_INV_UTF8>

An invalid UTF-8 sequences was encountered in a string.

=item * C<UJ_E_INV_ESC>

An invalid escape sequences was found in a string.

=item * C<UJ_E_INV_KEY>

A JSON value in the key position of a key-value-pair in an
object wasn't a string.

=item * C<UJ_E_NO_KEY>

A JSON object was missing a key in a position where one
should have appeared.

=item * C<UJ_E_TOO_DEEP>

The parser exceeded the nesting limit set via C<uni_json_max_nesting>.

=back

=head1 SEE ALSO

L<uni-json-parser-bindings(3)>

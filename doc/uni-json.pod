=head1 NAME

uni-json - A C JSON parser designed to be usable in any runtime environment

=head1 SYNOPSIS

    #include <uni_json_paser.h>

    extern unsigned uni_json_max_nesting;

    char *uni_json_ec_2_msg(unsigned ec);
    void *uni_json_parse(uint8_t *data, size_t len, struct uni_json_p_binding *binds);

=head1 DESCRIPTION

Uni-json (for "universal") is a JSON parsing library written in C that's designed to be
independent of (and thus, usable in) any particular execution environment by delegating
the task of creating and manageing actual objects representing particular JSON constructs
to "someone else" via a set of callbacks (see L<uni-json-parser-bindings(3)> for details.

Further design goals are simplicity  and speed, in that order. The code should be easy
enough to understand that one can be reasonably confident that it actually works instead
of trying to shave off every couple of nanoseconds which could be save somewhere. In
particular, this means it's a recursive-descent parser based on handling each individual
syntactic construct with a dedicated function and selecting the function to parse a
particular construct by doing a table-lookup of its first character..

=head2 Functions

=over

=item * C<void *uni_json_parse(uint8_t *data, size_t len, struct uni_json_p_binding *binds)>

Parse C<len> bytes of JSON text starting at C<data> using the parser bindings passed
via C<binds> for object creation and management. Returns a pointer to a data object
representing the JSON value found in the text or C<NULL> on error. For the latter case,
the C<on_error> handler passed via C<binds> will be invoked with an error code the
position of the error in the input text.

B<The text pointed to by C<data> is not expected to be a valid C string. Embedded null bytes
will be handled correctly, that is, flagged as JSON syntax errors.>

=item * C<char *uni_json_ec_2_msg(unsigned ec)>

Map the error code passeed as C<ec> to a standard (English) text message.

=back

=head2 Variables

=over

=item * C<extern unsigned uni_json_max_nesting>

Maximum depth the parser will descend to in nested structures before aborting
with an error. Defaults to B<0xffffffff>, ie, no effective limit. Can be set
to a smaller value to avoid DoS-attacks when dealing with data from
untrusted sources.

=back

=head1 SEE ALSO

L<uni-json-parser-bindings(3)>

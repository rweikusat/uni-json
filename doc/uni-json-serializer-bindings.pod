=head1 NAME

uni-json-serializer-bindings - object management and helper functions for uni-json serializer

=head1 SYNOPSIS

 #include <uni_json_types.h)
 #include <uni_json_s_binding.h>

 enum {
     UJ_T_NULL,
     UJ_T_BOOL,
     UJ_T_NUM,
     UJ_T_STR,
     UJ_T_ARY,
     UJ_T_OBJ,
     UJ_T_UNK
 };

 struct uj_data {
     uint8_t *s;
     size_t len;
 };

 struct uj_kv_pair {
     struct uj_data key;
     void *val;
 };

 struct uni_json_s_binding {
     /*  general */
     void (*output)(uint8_t *data, size_t len, void *sink);
     int (*type_of)(void *p);
     void *(*alloc)(size_t len);
     void (*dealloc)(void *p);

     /*  objects */
     void *(*start_object_traversal)(void *obj);
     size_t (*max_kv_pairs)(void *obj);
     void (*end_object_traversal)(void *oiter);
     int (*next_kv_pair)(void *oiter, struct uj_kv_pair *kvp);

     /*  arrays */
     void *(*start_array_traversal)(void *ary);
     void (*end_array_traversal)(void *aiter);
     void *(*next_value)(void *aiter);

     /*  "string data" types */
     void (*get_num_data)(void *num, struct uj_data *ndata);
     void (*free_num_data)(struct uj_data *ndata);

     void (*get_string_data)(void *str, struct uj_data *sdata);
     void (*free_string_data)(struct uj_data *sdata);

     /*  bool */
     int (*get_bool_value)(void *boolean);
 };

=head1 DESCRIPTION

Structure containing pointers to the functions which need to be provided to the uni-json
serializer to use it in a particular runtime environment.

=head2 Binding Functions

=head3 General

=over

=item * C<void output(uint8_t *data, size_t len, void *sink)>

Will be called by the serializer to output a JSON text fragment of C<len> bytes
starting at C<data>. The third argumment will be the C<sink> pointer provided
to C<uni_json_serialize>.

=item * C<int type_of(void *p)>

Called to determine the JSON type to be used for serializing the value pointed to
by C<p>. Must return one of the C<UJ_T...> constants. The effect of returning C<UJ_T_UNK>
(for I<unknown>) is identical to returning C<UJ_T_NULL>.

B<The return value is used to determine the type-specific serializer function to
use for C<p> and it's validity is not checked. Returning a value outside of
C<UJ_T_NULL> - C<UJ_T_UNK> will likely cause a crash or other memory corruption.>

=item * C<void *alloc(size_t len)>

Allocate a memory area of size C<len> for use by the serializer. This is only
used for I<deterministc> or I<pretty-printed> (see L<uni-json-serializer(3)) output
of objects. Only one such area will be needed at any given time. C<dealloc> will
be called with the returned pointer as argument before C<alloc> will be called
for another time.

=item * C<void dealloc(void *p)>

Called by the serializer to communicate that the memory area pointed to by
C<p> won't be used anymore. The argument will be a pointer returned by an earlier
C<alloc> call.

=back

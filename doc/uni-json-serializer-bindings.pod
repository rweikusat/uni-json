=head1 NAME

uni-json-serializer-bindings - object management and helper functions for uni-json serializer

=head1 SYNOPSIS

 #include <uni_json_types.h>
 #include <uni_json_s_binding.h>

 enum {
     UJ_T_NULL,
     UJ_T_BOOL,
     UJ_T_NUM,
     UJ_T_STR,
     UJ_T_ARY,
     UJ_T_OBJ,
     UJ_T_UNK
 };

 struct uj_data {
     uint8_t *s;
     size_t len;
 };

 struct uj_kv_pair {
     struct uj_data key;
     void *val;
 };

 struct uni_json_s_binding {
     /*  general */
     void (*output)(uint8_t *data, size_t len, void *sink);
     int (*type_of)(void *p);
     void *(*alloc)(size_t len);
     void (*dealloc)(void *p);

     /*  objects */
     void *(*start_object_traversal)(void *obj);
     size_t (*max_kv_pairs)(void *obj);
     void (*end_object_traversal)(void *oiter);
     int (*next_kv_pair)(void *oiter, struct uj_kv_pair *kvp);

     /*  arrays */
     void *(*start_array_traversal)(void *ary);
     void (*end_array_traversal)(void *aiter);
     void *(*next_value)(void *aiter);

     /*  "string data" types */
     void (*get_num_data)(void *num, struct uj_data *ndata);
     void (*free_num_data)(struct uj_data *ndata);

     void (*get_string_data)(void *str, struct uj_data *sdata);
     void (*free_string_data)(struct uj_data *sdata);

     /*  bool */
     int (*get_bool_value)(void *boolean);
 };

=head1 DESCRIPTION

Structure containing pointers to the functions which need to be provided to the uni-json
serializer to use it in a particular runtime environment.

=head2 Binding Functions

=head3 General

=over

=item * C<void output(uint8_t *data, size_t len, void *sink)>

Will be called by the serializer to output a JSON text fragment of C<len> bytes
starting at C<data>. The third argumment will be the C<sink> pointer provided
to C<uni_json_serialize>.

=item * C<int type_of(void *p)>

Called to determine the JSON type to be used for serializing the value pointed to
by C<p>. Must return one of the C<UJ_T...> constants. The effect of returning C<UJ_T_UNK>
(for I<unknown>) is identical to returning C<UJ_T_NULL>.

B<The return value is used to determine the type-specific serializer function to
use for C<p> via table lookup and its validity is not checked. Returning a value outside of
C<UJ_T_NULL> - C<UJ_T_UNK> will likely cause a crash or other memory corruption.>

=item * C<void *alloc(size_t len)>

Allocate a memory area of size C<len> for use by the serializer. This is only
used for I<deterministc> or I<pretty-printed> (see L<uni-json-serializer(3)>) output
of objects. Only one such area will be needed at any given time. C<dealloc> will
be called with the returned pointer as argument before C<alloc> will be called
for another time.

=item * C<void dealloc(void *p)>

Called by the serializer to communicate that the memory area pointed to by
C<p> won't be used anymore. The argument will be a pointer returned by an earlier
C<alloc> call.

=back

=head3 Object Serialization

=over

=item * C<void *start_object_traversal(void *obj)>

Called by the serializer to communicate that it wants to serialize
the object C<obj> next. The return value should be some kind of iterator
for this object. The argument will be a pointer a prior call to
C<type_of> return a value of C<UJ_T_BJ> for. The iterator must remain
valid until passed to C<end_object_traversal> regardless of any
calls to other binding routines in between.

=item * C<size_t max_kv_pairs(void *obj)>

Called to determine an upper bound for the number of key-value pairs
stored in the object C<obj>. The argument will be a pointer C<type_of>
returned C<UJ_T_OBJ> for earlier. The return value must be E<gt>= the actual
number of key-value pairs in the object. It'll be used to calculated
the C<len> argument to pass to a future call to C<alloc> when serializing
objects in I<deterministic> or I<pretty-printed> format (see L<uni-json-serializer(3)>).

=item * C(void end_object_traversal(void *oiter)>

Called by the serializer when it's done with serializing an object. The argument will be
a pointer returned by an earlier C<start_object_traversal> call.

=item * C<int next_kv_pair(void *oiter, struct uj_kv_pair *kvp)>

Called to determine information about the next key-value pair from some object
identified by the object iterator C<oiter>. The value will be a pointer returned
by an earlier C<start_object_traversal> call. Should return 0 if all key-value
pairs for this object were already returned, otherwise 1 and set C<kvp> suitably.
C<< kvp->key.s >> must be an UTF8-string representing the key text, C<< kvp->key.len >>
the length of this string in bytes. The pointer C<< kvp->val >> must point to the corresponding
value. All key and value pointers returned by calls to C<next_kv_pair> for a certain
C<oiter> must remain valid until C<end_object_traversal> has been called for the
same C<oiter> pointer.

The function won't be called again with a specific C<oiter> argument after it
returned 0 for it once.

=back

=head3 Array Serialization

=over

=item * C<void start_array_traversal(void *ary)>

Called when the serializer wants to start traversing the array C<ary>. The argument will
be a pointer an earlier C<type_of> call returned C<UJ_T_ARY> for. The return value
must be some kind of iterator for this array. It must remain valid until passed to
C<end_array_traversal> regardess of calls to other binding routines in between.

=item * C<void end_arry_traversal(void *aiter)>

Called when the array C<aiter> refers to has been completely serialized. The argument
will be a pointer returned by an earlier C<start_array_traversal> call.

=item * C<void *next_value(void *aiter)>

Called to determine the next value of the array identified by C<aiter>. Should return a pointer
to this value or C<NULL> to signal that all values have been processed. A returned value pointer
must remain valid until the next call to C<next_value> for this C<aiter> argument.

The function won't be called again for a specific C<aiter> after it returned C<NULL>
for it once.

=back

=head3 Numbers and Strings

=over

=item * C<void get_num_data(void *num, struct uj_data *ndata>

Called to convert the number object pointed-to by C<num> to a string. Must set
C<< data->s >> to the start of a string conforming to JSON number syntax
(see L<RFC8259|https://datatracker.ietf.org/doc/html/rfc8259>) of length C<< data->len >>.

No other serializer binding routines will be called until the returned string
has again been released via C<free_num_data>.

B<The returned string will be copied literally into the output.>

=item * C<void free_num_data(struct uj_data *ndata>

Called when the string representation of a number returned by C<get_num_data> won't
be needed anymore.

=item * C<void get_string_data(void *str, struct uj_data *sdata)>

Called to obtain access to the raw string data of the string object pointed to
by C<str>. On return, C<< data->s >> must point to a valid UTF-8 representation
of the string C<str> of length C<< data->len >>. The serializer will escape
individual characters as necessary to conform to JSON string syntax.

No other serializer binding routines will be called until the returned string
has again been released via C<free_string_data>.

=item * C<void free_string_data(struct uj_data *sdata>)

Called when a string representation returned by a prior call to C<get_string_data>
isn't needed anymore.

=back

=head3 Simple Types

=over

=item * C<int get_bool_value(void *boolean)>

Called to obtain the value of the boolean object pointed to be C<boolean>. The
return value will be interpreted according to the usual C convention for that: C<0> meaning
I<false> and  anything else I<true>.

=item * Null Values

Objects of type C<UJ_T_NULL> will be serialized as the string I<null>.

=back
